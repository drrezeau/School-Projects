/**********************************
 *This is my(and Derek's) set.h File. DO NOT TOUCH!!
 *It implements the class Set and its iterator.
 *Please Do not copy this. thank you, Have a Nice Day.
 ********************************/

#ifndef SET_H
#define SET_H

#include <cassert>


template <class T>
class SetIterator;

template<class T>
class Set      //HIKE!
{
  public:
   //Default Constructor
  Set() : myCapacity(0), numItems(0), data(0x00000000) {}

   //Non-default Constructor 
   Set(int capacity) throw (const char *);

   //Copy Constructor 
   Set(const Set & rhs) throw (const char *) { *this = rhs; }

   //Destructor
   ~Set() {delete [] data; }


   //Checks if the Set is empty
   bool empty() const { return numItems == 00; }

   //returns the size of the Set
   int size() const {return numItems; }

   //inserts a value into the Set at the right spot.
   void insert(const T value);

   //erases an item given by the user if found. NEEDs
   void erase(SetIterator<T> * item);

   // overloaded assignment operator 
   Set<T> & operator = (const Set<T>& rhs);

   //returns an iterator for the beginning of the Set
   SetIterator<T> begin() { return SetIterator<T>(data); }

   //returns an iterator for the end of the Set
   SetIterator<T> end() { return SetIterator<T>(data + numItems); }

   // finds if a given item is in the Set NEED
   SetIterator<T> find(T value);
   

  private:
   int numItems;
   int myCapacity;
   T * data;

   //implements the reallocation of data if needed;
   void regrowth();

   // locates a value within the Set if it exists
   SetIterator<T> locate(T value);

};

/*********************************
 * This is the class for the iterator 
 * for set which is shown above. 
 *******************************/
template <class T>
class SetIterator
{
  public:
   
   //Default Constructor
  SetIterator() : p(0x00000000) {}

   //Non Default Constructor
  SetIterator(T * p) : p(p) {}

   //copy Constructor
   SetIterator(const SetIterator & rhs) { this->p = rhs.p; }

   SetIterator & operator = (const SetIterator & rhs)
   {
      this->p = rhs.p;
      return *this;
   }

   bool operator != (const SetIterator & rhs) const
   {
      return rhs.p != this->p;
   }

   T & operator * ()
   {
      return *p;
   }

   SetIterator <T> & operator ++ ()
   {
      p++;
      return *this;
   }

   SetIterator <T> operator++ (int postfix)
   {
      SetIterator tmp(*this);
      p++;
      return tmp;
   }
   
  private:
   T * p;
   
};

/*************************
 * This is the implementation of
 * the non Default Constructor
 *************************/
template <class T>
Set<T> :: Set(int capacity) throw (const char *)
{
   assert (capacity >= 0);

   if (capacity == 0)
   {
      this->myCapacity = this->numItems = 0;
      this->data = 0x00000000;
      return;
   }

    try
   {
      this->data = new T[capacity];
   }

   catch(...)
   {
      throw "Error: Unable to allocate buffer";
   }

   this->myCapacity = capacity;
   this->numItems = 0;
}
      

/*************************
 * Implementation of the overloaded assignment
 * operator, will be used within copy.
 **************************/
template <class T>
Set<T> & Set<T> :: operator = (const Set<T>& rhs)
{
   assert(rhs.myCapacity >=0);

   if (rhs.myCapacity == 0)
   {
      this->myCapacity = this->numItems = 0;
      this->data = 0x00000000;
      return *this;
   }

   try
   {
      this->data = new T[rhs.myCapacity];
   }

   catch(...)
   {
      throw "Error: Unable to allocate buffer";
   }

   this->myCapacity = rhs.myCapacity;
   this->numItems = rhs.numItems;
   for (int i = 0; i < numItems; i++)
      this->data[i] = rhs.data[i];

   return *this;
}

/****************************
 *INSERT (T Value)
 * this function will take the value given by
 * the user and insert it into the function.
 ******************************/
template <class T>
void Set<T> :: insert(const T value)
{
   if (myCapacity == 0)
   {
      myCapacity += 1;
      data = new T[myCapacity];
      data[numItems] = value;
      numItems++;
      return;
   }
   
   if (myCapacity == numItems)
      regrowth();

   SetIterator<T> it = locate(value);

   int tmp = *it;
  
   if (tmp == value)
      return;
   else
   {
      //   std:: cout << tmp << std::endl;
      T *newData = new T[myCapacity];
      if (value < tmp)
      {
         int i;
         for (i = 0; data[i] != tmp; i++)
         {
            newData[i] = data[i];
         }
         newData[i] = value;
         for (i; data[i]; i++)
         {
            newData[i+ 1] = data[i];
         }
         delete [] data;
         data = newData;
      }
      else
         data[numItems] = value;
   }
 
   numItems++;
}
   
/**********************
 * This function takes the capacity of the Set
 * and doubles and reallocates the data.
 *********************/
template <class T>
void Set <T> :: regrowth()
{
   T * newData;
   myCapacity *= 2;

   try
   {
      newData = new T[myCapacity];
   }

   catch(...)
   {
      throw "Unable to allocate a buffer for Set.";
   }

   for (int i = 0; i < numItems; i++)
   {
      newData[i] = data[i];
   }

   delete [] data;
   data = newData;
}

/************************
 * This function uses a binary search to locate
 * the given value in the Set, if it is not found
 * returns the value right below it.
 ***************************/
template<class T>
SetIterator<T> Set<T> :: locate(T value)
{
   SetIterator<T> it;
   int middle;
   int low = 0;
   int high = numItems;
   
   while ( low <= high)
   { 
      middle = (high+low)/2;
      if (data[middle] == value)
      {
         it = &data[middle];
         return it;
      }
      else if (data[middle] < value)
      {
         low = middle +1;
      }
      else
         high = middle -1;
   }

   if (data[middle] < value)
      middle++;
   it = &data[middle];
   std:: cout << *it << std::endl;
   return it;
}

#endif

